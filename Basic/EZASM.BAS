100 ' COCO INTERACTIVE ASSEMBLER
110 ' COPYRIGHT 1990, WILLIAM BARDEN, JR.
120 '************************************************************
130 '                     DATA DICTIONARY
140 '************************************************************
150 'A$=TEMPORARY VARIABLE
160 'AA$=ALLOWABLE ADDRESSING MODES
170 'AL=1 IF BINARY DATA ON SCREEN
180 'AM$=CURRENT ADDRESSING MODE CHARACTER CODE
190 'AM=DECODED ADDRESSING MODE
200 'CH=1 IF LINE CHANGED
210 'CP=SCREEN CHARACTER POSITION, 0 TO 79
220 'DI=DISPLACEMENT VALUE OF OPERAND
230 'E1=EA MS BYTE
240 'E2=EA LS BYTE
250 'EA=COMPUTED EFFECTIVE ADDRESS
260 'EB=LAST BINARY DATA LOCATION
270 'I=GENERAL WORKING INDEX
280 'J=GENERAL WORKING INDEX
290 'L$(22)=SCREEN LINE ARRAY
300 'LI=NUMBER OF BYTES IN MACHINE CODE
310 'LO=CURRENT LOCATION FOR BINARY
320 'LR=LAST SOURCE ROW USED
330 'M1$=ALL ONE-BYTE OP CODES
340 'M2$=ALL TWO OR THREE-BYTE OP CODES
350 'M3$=ALL THREE OR FOUR-BYTE OP CODES
360 'ML$=CURRENT PARTIAL OP CODE STRING
370 'MM$=FIRST BYTE OF MACHINE LANGUAGE
380 'MN=NUMERIC VALUE OF MNEMONIC
390 'MS$=SECOND BYTE OF MACHINE LANGUAGE
400 'NA=O IF NO BINARY, 1 IF BINARY ON SCREEN
410 'NV=NUMERIC VALUE OF OPERAND
420 'OB$=ALL ONE-BYTE MNEMONICS
430 'OO$=OBJECT OUTPUT FILE NAME
440 'PN=PASS NUMBER, 0 OR 1
450 'PS$=ALL PSEUDO OPS, MNEMONICS
460 'RW=SCREEN ROW, 0 TO 22
470 'S(26)=SYMBOL TABLE
480 'SA=STARTING ADDRESS FOR ASSEMBLED PROGRAM
490 'SB=FIRST BINARY DATA LOCATION
500 'SC=SAVE CHARACTER POSITION
510 'SG=SIGN OF RELATIVE DISPLACEMENT
520 'SI$=SOURCE INPUT FILE NAME
530 'SO$=SOURCE OUTPUT FILE NAME
540 'SR=SAVE ROW
550 'ST$=FCC STRING
560 'SY=CURRENT SYMBOL, WORKING
570 'T1$=ALL TWO OR THREE-BYTE MNEMONICS, PART ONE
580 'T2$=ALL TWO OR THREE-BYTE MNEMONICS, PART TWO
590 'TH$=ALL THREE OR FOUR BYTE MNEMONICS
600 'Y=GENERAL WORKING INDEX
610 'Z$=GENERAL WORKING STRING
620 'ZA$=TEMPORARY FOR SINGLE CHARACTER
630 'ZC=CHAR POSITION, WORKING
640 'ZE=ERROR CODE
650 'ZS$=WORKING STRING FOR INDEXING CHARACTERS
660 'ZT$=OP CODE FOR INDEXING TYPE
670 '************************************************************
680 '                    PRELIMINARY - 1
690 '************************************************************
700 CLEAR 2000,&H7EFF
710 CLS
720 PRINT "COCO INTERACTIVE ASSEMBLER 1.0"
730 PRINT "COPYRIGHT 1990, WILLIAM BARDEN, JR."
740 INPUT "SOURCE INPUT FILE:"; SI$
750 INPUT "SOURCE OUTPUT FILE:"; SO$
760 INPUT "OBJECT OUTPUT FILE:"; OO$
770 '************************************************************
780 '                    MNEMONICS AND OP CODES
790 '************************************************************
800 'ONE-BYTE INSTRUCTIONS - NO FOLLOWING BYTES - 0 TO 29
810 OB$="ABX  ASLA ASLB ASRA ASRB CLRA CLRB COMA COMB DAA  DECA DECB INCA INCB LSLA LSLB LSRA LSRB MUL  NEGA NEGB NOP  ROLA ROLB RORA RORB RTS  SEX  TSTA TSTB "
820 M1$="3A485847574F5F4353194A5A4C5C485844543D40501249594656391D4D5D"
830 'TWO- OR THREE-BYTE INSTRUCTIONS DEPENDING UPON IMMEDIATE OR EXTENDED OPRND
840 '30 TO 103
850 T1$="ADCA ADCB ADDA ADDB ADDD ANDA ANDB ANDCCASL  ASR  LBCC LBCS LBEQ LBGE LBGT LBHI LBHS BITA BITB LBLE LBLO LBLS LBLT LBMI LBNE LBPL LBRA LBRN LBSR LBVC LBVS CLR  "
860 T2$="CMPA CMPB CMPX COM  DEC  EORA EORB INC  JMP  JSR  LDA  LDB  LDD  LDU  LDX  LEAS LEAU LEAX LEAY LSL  LSR  NEG  ORA  ORB  ORCC PSHS PSHU PULS PULU ROL  ROR  SBCA SBCB STA  STB  STD  STU  STX  SUBA SUBB SUBD TST  "
870 M2$="89C98BCBC384C41C48472425272C2E222485C52F25232D2B262A16211728294F81C18C434A88C84C4E8D86C6CCCE8E121310114844408ACA1A34363537494682C287C7CDCF8F80C0834D"
880 'INSTRUCTIONS OTHER THAN RELATIVE WITH LEADING 10
890 '104 TO 111
900 TH$="CMPD CMPS CMPU CMPY LDS  LDY  STS  STY  "
910 M3$="1083118C1183108C10CE108E10CF108F"
920 'PSEUDO-OPS - 112 TO 115
930 PS$="FCB  FCC  FDB  ORG  "
940 'ALLOWABLE ADDRESSING MODES. SUBTRACT HEX 40 TO FIND 000BEIXR WHERE
950 'B IS OP BYTE (B=0);E=EXTENDED;I=IMMEDIATE;X=INDEXED;R=RELATIVE.
960 AA$="..............................NNNN^NNDJJAAAAAAANNAAAAAAAAAAAAJNN^JJNNJZZNN^^^BBBBJJJNNDDDDDJJNNJJZZZNN^J^^^^^^JJ...."
970 '************************************************************
980 '                       PRELIMINARY - 2
990 '************************************************************
1000 DIM L$(22), S(26)
1010 HSCREEN 4
1020 HBUFF 1,300
1030 HGET(0,0)-(111,7),1
1040 GOSUB 3390
1050 '************************************************************
1060 '                          MAIN LOOP
1070 '************************************************************
1080 LR=-1
1090 PN=0
1100 AL=0
1110 GOSUB 1220
1120 IF CP<53 THEN HLINE(13*8,RW*8)-(13*8+7,RW*8+7),PRESET,BF ELSE                   HLINE(53*8,RW*8+7)-(53*8+7,RW*8+7),PRESET,BF
1130 GOSUB 2140
1140 RW=RW+1
1150 IF RW=23 THEN RW=0: IF CP<40 THEN CP=54 ELSE CP=14
1160 IF CP>53 THEN CP=54 ELSE CP=14
1170 GOTO 1110
1180 '************************************************************
1190 '                           EDITOR
1200 '************************************************************
1210 'SUBROUTINE TO ENTER LINE OF TEXT
1220 ZA$=INKEY$: IF ZA$="" THEN HLINE (CP*8,RW*8+7)-(CP*8+7,RW*8+7),PSET,B:          HLINE (CP*8,RW*8+7)-(CP*8+7,RW*8+7),PRESET,B: GOTO 1220
1230 '***UP ARROW***
1240 IF ZA$<>CHR$(94) THEN GOTO 1300
1250 IF CH=1 THEN CH=0: GOSUB 2140
1260 RW=RW-1
1270 IF RW<>-1 THEN GOTO 1220
1280 IF CP>39 THEN RW=22: CP=14: GOTO 1220 ELSE RW=22: CP=54: GOTO 1220
1290 '***DOWN ARROW***
1300 IF ZA$<>CHR$(10) THEN GOTO 1360
1310 IF CH=1 THEN CH=0: GOSUB 2140
1320 RW=RW+1
1330 IF RW<>23 THEN GOTO 1220
1340 IF CP>39 THEN RW=0: CP=14: GOTO 1220 ELSE RW=0: CP=54: GOTO 1220
1350 '***LEFT ARROW***
1360 IF ZA$<>CHR$(8) THEN GOTO 1400
1370 CP=CP-1
1380 IF CP=13 THEN CP=38: GOTO 1220 ELSE IF CP=53 THEN CP=78:GOTO 1220 ELSE          GOTO 1220
1390 '***RIGHT ARROW***
1400 IF ZA$<>CHR$(9) THEN GOTO 1440
1410 CP=CP+1
1420 IF CP=39 THEN CP=14: GOTO 1220 ELSE IF CP=79 THEN CP=54: GOTO 1220 ELSE         GOTO 1220
1430 '***CLEAR CURRENT PROGRAM***
1440 IF ZA$<>CHR$(12) THEN GOTO 1490
1450 ZA$=INKEY$: IF ZA$="" THEN GOTO 1450 ELSE IF ZA$<>CHR$(12) THEN GOTO 1490
1460 GOSUB 3390
1470 RETURN
1480 '***F1=ASSEMBLE, SAVE SOURCE AND BINARY***
1490 IF ZA$<>CHR$(103) THEN GOTO 1650
1500 PN=1
1510 GOSUB 3530
1520 LO=&H7F00: SC=CP: SR=RW: CP=14
1530 FOR RW=0 TO 22: GOSUB 2150: NEXT
1540 CP=54
1550 FOR RW=0 TO 22: GOSUB 2150: NEXT
1560 OPEN"O",#1,SO$
1570 FOR I=0 TO 22: WRITE#1,L$(I): NEXT I
1580 CLOSE 1
1590 IF SB<>0 THEN SAVEM OO$,SB,EB,SA
1600 CP=SC: RW=SR
1610 AL=1
1620 PN=0
1630 GOTO 1220
1640 '***F2=READ SOURCE, NO BINARY***
1650 IF ZA$<>CHR$(4) THEN GOTO 1810
1660 GOSUB 3510
1670 HCLS
1680 OPEN"I",#1,SI$
1690 CP=14: RW=0
1700 FOR I=0 TO 22: INPUT#1, L$(I): NEXT
1710 FOR I=0 TO 22: IF MID$(L$(I),1,39)=STRING$(39," ") THEN HPRINT (0,I),          "              . ..... ...... ..........": NEXT ELSE HPRINT (O,I),               MID$(L$(I),1,39): NEXT
1720 FOR I=0 TO 22: HPRINT (39,I),A$: NEXT
1730 FOR I=0 TO 22: IF MID$(L$(I),41,38)=STRING$(38," ") THEN HPRINT (40,I),         "              . ..... ...... ..........": NEXT ELSE HPRINT (40,I),              MID$(L$(I),41,38): NEXT
1740 GOSUB 3570
1750 CLOSE 1
1760 LO=&H7F00: PN=0: CP=14
1770 FOR RW=0 TO 22: GOSUB 2150: NEXT
1780 CP=54
1790 RW=0: CP=14
1800 GOTO 1220
1810 '***LOOK FOR SHIFT, UP ARROW***
1820 IF ZA$<>CHR$(95) THEN GOTO 1940
1830 IF AL=1 GOSUB 3510: AL=0
1840 IF CP>40 THEN J=RW: GOTO 1890
1850 IF RW=22 THEN GOTO 1870
1860 FOR I=RW TO 21: MID$(L$(I),1,38)=MID$(L$(I+1),1,38): NEXT
1870 MID$(L$(22),1,38)=MID$(L$(0),41,80)
1880 J=0
1890 IF J=22 THEN GOTO 1910
1900 FOR I=J TO 21: MID$(L$(I),41,80)=MID$(L$(I+1),41,80): NEXT
1910 MID$(L$(22),41,80)="                                      "
1920 HCLS: GOSUB 1710
1930 RETURN
1940 '***LOOK FOR SHIFT, DOWN ARROW***
1950 IF ZA$<>CHR$(91) THEN GOTO 2050
1960 IF AL=1 THEN GOSUB 3510: AL=0
1970 IF CP>40 THEN J=RW ELSE J=0
1980 FOR I=21 TO J STEP -1: MID$(L$(I+1),41,39)=MID$(L$(I),41,29): NEXT
1990 MID$(L$(J),41,39)="                                       "
2000 IF CP>40 THEN GOTO 2040
2010 MID$(L$(0),41,39)=MID$(L$(22),1,38)
2020 FOR I=21 TO RW STEP -1: MID$(L$(I+1),1,38)=MID$(L$(I),1,38): NEXT
2030 MID$(L$(RW),1,38)="                                      "
2040 GOTO 1920
2050 CH=1
2060 IF ZA$=CHR$(13) THEN RETURN
2070 GOSUB 3290: HPRINT (CP,RW),ZA$
2080 CP=CP+1
2090 IF ((CP=39) OR (CP=79)) THEN RETURN
2100 GOTO 1220
2110 '************************************************************
2120 '                         ASSEMBLER
2130 '************************************************************
2140 'SUBROUTINE TO PROCESS LINE OF TEXT
2150 IF CP>53 THEN ZC=55 ELSE ZC=15
2160 IF MID$(L$(RW),ZC,14)="              " THEN RETURN
2170 '***FIRST PROCESS POSSIBLE SYMBOL***
2180 IF MID$(L$(RW),ZC,1)<>" " THEN SY=ASC(MID$(L$(RW),ZC,1)) ELSE GOTO 2220
2190 IF MID$(L$(RW),ZC+1,1)<>" " THEN ZE=2: GOTO 3330
2200 IF ((SY>64) AND (SY<91)) THEN GOTO 2210 ELSE ZE=1: GOTO 3330
2210 SY=SY-65: IF S(SY)=-1 THEN S(SY)=LO ELSE IF (PN=0) AND (S(SY)<>LO) THEN             ZE=1: GOTO 3330
2220 '***NOW FIND 5 CHARACTERS OF MNEMONIC***
2230 ZC=ZC+2
2240 IF MID$(L$(RW),ZC+5,1)<>" " THEN ZE=2: GOTO 3330
2250 MN=INSTR(OB$,(MID$(L$(RW),ZC,5))): IF MN=0 THEN GOTO 2300
2260 IF MID$(L$(RW),ZC+5,7)<>"       " THEN ZE=3: GOTO 3330
2270 MN=(MN-1)/5
2280 ML$=MID$(M1$,MN*2+1,2)
2290 GOTO 2610
2300 MN=INSTR(T1$,MID$(L$(RW),ZC,5)): IF MN<>0 THEN MN=(MN-1)/5: GOTO 2320
2310 MN=INSTR(T2$,MID$(L$(RW),ZC,5)): IF MN=0 THEN GOTO 2330 ELSE MN=(MN-1)/5 +      32
2320 ML$=MID$(M2$,MN*2+1,2): MN=MN+30: GOTO 2370
2330 MN=INSTR(TH$,MID$(L$(RW),ZC,5)): IF MN=0 THEN GOTO 2350
2340 ML$=MID$(M3$,((MN-1)/5)*4+1,4): MN=(MN-1)/5 + 104: GOTO 2370
2350 MN=INSTR(PS$,MID$(L$(RW),ZC,5)): IF MN=0 THEN ZE=3: GOTO 3330 ELSE              MN=((MN-1)/5)+112
2360 '***NOW FIND OPERAND TYPE***
2370 EA=99999: NV=99999: DI=99999: ST$=""
2380 ZC=ZC+6
2390 'FIRST LOOK FOR $XXXX - EXTENDED ADDRESSING - MUST BE HEX
2400 IF MID$(L$(RW),ZC,1)="$" THEN EA=VAL("&H"+MID$(L$(RW),ZC+1,4)): IF EA=0         THEN ZE=4: GOTO 3330 ELSE GOTO 2610
2410 'LOOK FOR #$XXXX - IMMEDIATE TWO OR FOUR DIGIT HEX
2420 IF MID$(L$(RW),ZC,2)="#$" THEN NV=VAL("&H"+MID$(L$(RW),ZC+2,4) ): GOTO 2610
2430 'LOOK FOR #XXXXX - IMMEDIATE DECIMAL
2440 IF MID$(L$(RW),ZC,1)="#" THEN NV=VAL(MID$(L$(RW),ZC+1,5) ): GOTO 2610
2450 'LOOK FOR + OR - WITH XXX,R
2460 IF (MID$(L$(RW),ZC,1)<>"-" AND MID$(L$(RW),ZC,1)<>"+") THEN GOTO 2500
2470 ZS$=MID$(L$(RW),ZC+4,2): IF (ZS$<>",Y" AND ZS$<>",X" AND ZS$<>",U" AND          ZS$<>",S") THEN ZE=5: GOTO 3330
2480 IF ZS$=",X" THEN ZT$="88" ELSE IF ZS$=",Y" THEN ZT$="A8" ELSE IF ZS$=",U"       THEN ZT$="C8" ELSE ZT$="E8"
2490 DI=VAL(MID$(L$(RW),ZC,4)): GOTO 2610
2500 IF MN<112 THEN GOTO 2560
2510 IF MN<>113 THEN GOTO 2540
2520 FOR I=ZC TO ZC+15: IF MID$(L$(RW),I,1)="#" THEN GOTO 2530 ELSE ST$=ST$ +        MID$(L$(RW),I,1): NEXT
2530 GOTO 2610
2540 IF MID$(L$(RW),ZC+5,1)<>" " THEN ZE=5: GOTO 3330 ELSE NV=VAL(MID$(L$(RW),ZC,5)): GOTO 2610
2550 'MUST BE SYMBOLIC ADDRESS HERE
2560 IF MID$(L$(RW),ZC+1,1)<>" " THEN ZE=5: GOTO 3330
2570 SY=ASC(MID$(L$(RW),ZC,1)) - 65
2580 IF (SY<0 OR SY>25) THEN ZE=5: GOTO 3330
2590 IF S(SY)<>-1 THEN EA=S(SY): GOTO 2610 ELSE IF PN=1 THEN ZE=1: GOTO 3330
2600 IF CP>53 THEN HPRINT (53,RW),"#": EA=0 ELSE HPRINT (13,RW),"#": EA=0
2610 '***NOW HAVE VALID MNEMONIC AND ARGUMENT, CONSTRUCT MACHINE LANGUAGE***
2620 IF CP>39 THEN ZC=40 ELSE ZC=0
2630 IF MN>29 THEN GOTO 2770
2640 LI=1
2650 IF CP>39 THEN IF RW+22<LR THEN IF PN=0 THEN GOSUB 3530: GOTO 2700
2660 IF CP<=39 THEN IF RW<LR THEN IF PN=0 THEN GOSUB 3530: GOTO 2700
2670 IF PN=0 THEN GOTO 2700
2680 HPRINT (ZC,RW),RIGHT$("0000"+HEX$(LO),4)+" "+ML$
2690 FOR I=0 TO LEN(ML$)/2-1: POKE LO+I, VAL("&H"+MID$(ML$,I*2+1,2)): NEXT
2700 IF SB>LO THEN SB=LO
2710 LO=LO+LI
2720 EB=LO-1
2730 IF CP>39 THEN IF RW+22>LR THEN LR=RW+22
2740 IF CP<=39 THEN IF RW>LR THEN LR=RW
2750 RETURN
2760 'FIRST CHECK FOR RELATIVE ADDRESSING
2770 IF MN>111 THEN GOTO 3170
2780 AM$=MID$(AA$,MN+1,1)
2790 IF AM$<>"A" THEN GOTO 2880
2800 IF MN=56 THEN ML$="16": LI=3: GOTO 2830
2810 IF MN=58 THEN ML$="17": LI=3: GOTO 2830
2820 ML$="10"+ML$: LI=4
2830 EA=EA-LO-LI: IF EA<0 THEN SG=1: EA=ABS(EA) ELSE SG=0
2840 E1=INT(EA/256): E2=EA-(E1*256)
2850 IF SG=1 THEN E2=256-E2: E1=255-E1: IF E2=256 THEN E2=0: E1=E1+1
2860 ML$=ML$+RIGHT$("00"+HEX$(E1),2)+RIGHT$("00"+HEX$(E2),2)
2870 GOTO 2650
2880 'NOW CHECK FOR IMMEDIATE ADDRESSING
2890 IF NV=99999 THEN GOTO 2950
2900 AM=ASC(AM$)-&H40
2910 IF (AM AND 4)<>4 THEN ZE=4: GOTO 3330
2920 IF (AM AND 16)<>16 THEN ML$=ML$+RIGHT$("00"+HEX$(NV),2) ELSE                    ML$=ML$+RIGHT$("0000"+HEX$(NV),4)
2930 LI=LEN(ML$)/2: GOTO 2650
2940 ML$=ML$+RIGHT$("0000"+HEX$(NV),4): LI=3: GOTO 2650
2950 'NOW CHECK FOR EXTENDED ADDRESSING
2960 IF EA=99999 THEN GOTO 3030
2970 AM=ASC(AM$)-&H40
2980 IF (AM AND 8)<>8 THEN ZE=4: GOTO 3330
2990 IF LEN(ML$)=4 THEN MM$=LEFT$(ML$,2) ELSE MM$=""
3000 IF LEN(ML$)=4 THEN MS$=RIGHT$(ML$,2) ELSE MS$=ML$
3010 ML$=MM$+RIGHT$("00"+HEX$(VAL("&H"+MS$)+48),2)+RIGHT$("0000" + HEX$(EA),4)
3020 LI=LEN(ML$)/2: GOTO 2650
3030 'NOW CHECK FOR INDEXED ADDRESSING
3040 IF DI=99999 THEN ZE=10: GOTO 3330
3050 IF DI>127 OR DI<-128 THEN ZE=11: GOTO 3330
3060 IF DI<0 THEN DI=256+DI
3070 AM=ASC(AM$)-&H40
3080 IF (AM AND 2)<>2 THEN ZE=10: GOTO 3330
3090 IF LEN(ML$)=4 THEN MM$=LEFT$(ML$,2) ELSE MM$=""
3100 IF LEN(ML$)=4 THEN MS$=RIGHT$(ML$,2) ELSE MS$=ML$
3110 ML$=MM$+RIGHT$("00"+HEX$(VAL("&H"+MS$)+32),2)+ZT$+RIGHT$("0000"+                HEX$(DI),2): LI=LEN(ML$)/2: GOTO 2650
3120 GOTO 2650
3130 'CHECK FOR OP-CODE FCB OR GREATER
3140 IF EA<>99999 THEN ML$=LEFT$(ML$,2)+RIGHT$("00"+HEX$(VAL("&H"+MID$(ML$,3,2))     +48),2)+ RIGHT$("0000"+HEX$(EA),4): LI=4: GOTO 2670
3150 IF NV<>99999 THEN IF NV>65535 THEN ZE=6: GOTO 3330
3160 IF NV<>99999 THEN ML$=ML$+RIGHT$("0000"+HEX$(NV),4): LI=4: GOTO 2670
3170 'CHECK FOR FCB
3180 IF MN=112 THEN IF ( NV=99999 OR NV>255 ) THEN ZE=6: GOTO 3330 ELSE               ML$=RIGHT$("00"+HEX$(NV),2):LI=1: GOTO 2670
3190 'CHECK FOR FCC
3200 IF MN=113 THEN ML$=CHR$(34)+LEFT$(ST$,6)+CHR$(34): LI=LEN(ST$): GOTO 2670
3210 'CHECK FOR FDB
3220 IF MN=114 THEN IF NV>65535 THEN ZE=6: GOTO 3330 ELSE ML$=RIGHT$("0000"+HEX$     (NV),4): LI=2: GOTO 2670
3230 'CHECK FOR ORG
3240 IF MN>115 THEN IF EA=99999 THEN ZE=6: GOTO 3330
3250 LO=EA: ML$="": LI=0: GOTO 2670
3260 '************************************************************
3270 '                     UTILITY SUBROUTINES
3280 '************************************************************
3290 '***SUBROUTINE TO CLEAR CURRENT CHARACTER POSITION AND STORE CHAR***
3300 HLINE (CP*8,RW*8)-(CP*8+7,RW*8+7),PRESET,BF
3310 MID$(L$(RW),CP+1,1)=ZA$
3320 RETURN
3330 '***ERROR PROCESSING FOR LINE***
3340 IF CP>53 THEN ZC=53 ELSE ZC=13
3350 HLINE (ZC*8,RW*8)-(ZC*8+7,RW*8+7),PRESET,BF
3360 HPRINT (ZC,RW),"*"
3370 RETURN
3380 '***CLEAR EVERYTHING SUBROUTINE***
3390 LO=&H7F00: SA=LO: SB=LO
3400 PN=0
3410 FOR I=0 TO 22: L$(I)="                                       "+A$+"                                       ": NEXT
3420 FOR I=0 TO 26: S(I)=-1: NEXT
3430 GOSUB 3510
3440 HCLS
3450 CP=14: RW=0
3460 A$=CHR$(124)
3470 FOR Y=0 TO 22: HPRINT (0,Y),"              . ..... ...... ..........               . ..... ...... ..........": NEXT
3480 FOR Y=0 TO 22: HPRINT (39,Y),A$: NEXT
3490 GOSUB 3570
3500 RETURN
3510 '***CLEAR BINARY DATA AND SCREEN***
3520 FOR I=0 TO 26: S(I)=-1: NEXT
3530 FOR I=0 TO 22: HPUT(0,I*8)-(103,I*8+7),1,PSET: NEXT
3540 FOR I=0 TO 22: HPUT(320,I*8)-(423,I*8+7),1,PSET: NEXT
3550 RETURN
3560 '***PRINT TITLE***
3570 HPRINT (0,24),"BARDEN'S EZASM: F1 SAVES/F2 LOADS/CLEAR/SHFT,UP ARR DELETES/SHFT,DN ARR INSERTS"
3580 RETURN
